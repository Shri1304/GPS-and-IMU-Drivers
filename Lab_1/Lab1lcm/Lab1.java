/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package Lab1lcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Lab1 implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public float latitude;
    public float longitude;
    public float altitude;
    public boolean enabled;
 
    public Lab1()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7a1c117a578b2333L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(Lab1lcm.Lab1.class))
            return 0L;
 
        classes.add(Lab1lcm.Lab1.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeFloat(this.latitude); 
 
        outs.writeFloat(this.longitude); 
 
        outs.writeFloat(this.altitude); 
 
        outs.writeByte( this.enabled ? 1 : 0); 
 
    }
 
    public Lab1(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Lab1(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static Lab1lcm.Lab1 _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        Lab1lcm.Lab1 o = new Lab1lcm.Lab1();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.latitude = ins.readFloat();
 
        this.longitude = ins.readFloat();
 
        this.altitude = ins.readFloat();
 
        this.enabled = ins.readByte()!=0;
 
    }
 
    public Lab1lcm.Lab1 copy()
    {
        Lab1lcm.Lab1 outobj = new Lab1lcm.Lab1();
        outobj.timestamp = this.timestamp;
 
        outobj.latitude = this.latitude;
 
        outobj.longitude = this.longitude;
 
        outobj.altitude = this.altitude;
 
        outobj.enabled = this.enabled;
 
        return outobj;
    }
 
}

